import java.util.concurrent.locks.Condition; //import condition and lock
import java.util.concurrent.locks.ReentrantLock;

public class Bridge{

	private static ReentrantLock lock = new ReentrantLock(); // create the lock
	private static Condition condition = lock.newCondition(); //create condition
	
	
	//prevents deadlock from vehicles going opposite directions
	public static void accessBridge(String direction){
		lock.lock(); 
		try {
			
			
			//simulate crossing bridge
			System.out.println("Vehicle going " + direction + " is crossing.");
			Thread.sleep((long) (Math.random()*4000+1000)); //simulates crossing
			System.out.println("Vehicle going " + direction + " has crossed.");
			
			
			condition.signalAll(); // signals next thread can proceed
		} catch(InterruptedException e) {
			e.printStackTrace();
		}
		finally {
			lock.unlock();
		}
	}
	
	
	public static void main(String[] args) {
		for (int i = 0; i<5;i++) { //loops 5 times for 5 vehicles west and 5 east
			//thread for going east
			new Thread(() -> { 
				try { //trys to sleep thread then attempts to cross bridge
					Thread.sleep((long) (Math.random()*500+1000));
					accessBridge("East");
				} catch (InterruptedException e) { //if error prints out stack trace
					e.printStackTrace();
				}
			}).start(); //starts thread
			
			//creates threads for going west
			new Thread(() -> { //creates thread that does following
				try { //trys to sleep thread then attempts to cross bridge
					Thread.sleep((long) (Math.random()*500+1000));
					accessBridge("West");
				} catch (InterruptedException e) { //if error prints out stack trace
					e.printStackTrace();
				}
			}).start(); //starts thread
		}
	
			
			
		
		
	}

}
